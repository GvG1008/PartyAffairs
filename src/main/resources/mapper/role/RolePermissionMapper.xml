<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zqu.pa.dao.role.RolePermissionMapper">
  <select id="selectPermission" resultType="com.zqu.pa.entity.role.Permission">
    Select rm.permission_id 'permissionId', rm.permission_name 'permissionName', description
    From role_permission rp
    Left Join permission_menu rm on rm.permission_id = rp.permission
    Where rp.role_id = #{roleId}
  </select>
  
  <select id="selectAllPermission" resultType="com.zqu.pa.entity.role.Permission">
    Select permission_id 'permissionId', permission_name 'permissionName', description
    From permission_menu
  </select>
  
  <delete id="deleteRolePermissions">
    Delete from role_permission
    Where role_id = #{roleId}
  </delete>
  
  <insert id="insertRolePermissions">
    Insert into role_permission(role_id, permission)
    Values
    <foreach collection="permissions" index="index" item="permission" separator="),(" open="(" close=")">
      #{roleId}, 
      #{permission}
    </foreach>
  </insert>
  
  <select id="selectAdminRoleIdList" resultType="Integer">
    SELECT role_id
    FROM role_permission
    WHERE permission in (SELECT permission_id FROM permission_menu WHERE permission_name = #{permissionName})
  </select>
  
  <select id="selectAdminUserList" resultType="com.zqu.pa.vo.userInfo.AdminUserInfo">
    SELECT up.name 'name', ul.user_id 'userId' , ul.password 'password', r.role_name 'roleName', pb.branch_name 'branchName'
    FROM user_login ul
    LEFT JOIN role r ON r.role_id = ul.role_id 
    LEFT JOIN user_person_info up ON up.user_id = ul.user_id
    LEFT JOIN user_party_info upi ON upi.user_id = ul.user_id
    LEFT JOIN partybranch pb ON pb.branch_id = upi.branch_id
    WHERE r.role_id IN
    <foreach collection="roleIds" index="index" item="roleId" separator="," open="(" close=")">
     #{roleId}
    </foreach>
  </select>
  
  <select id="getAllbranch" resultType="com.zqu.pa.vo.perinfo.Branch">
  SELECT * from partybranch
  </select>
  <select id="getRoleList" resultType="com.zqu.pa.vo.perinfo.Role">
    SELECT role_id , role_name
    FROM role
    where role_id  in (SELECT rp.role_id from role_permission rp left join permission_menu pm ON pm.permission_id = rp.permission
                            WHERE permission_name = 'role:admin')
  </select>
  <insert id="insertAdminUserLoginInfo" parameterType="com.zqu.pa.vo.userInfo.UserLoginInfo">
    insert into user_login 
        (user_id ,
        password ,
        role_id ,
        state)
    values(
        #{userId,jdbcType=VARCHAR},
        #{password,jdbcType=VARCHAR}, 
        #{roleId,jdbcType=INTEGER},
        #{state,jdbcType=INTEGER}
        )
    ON DUPLICATE KEY UPDATE 
    password = #{password,jdbcType=VARCHAR}, 
    role_id = #{roleId,jdbcType=INTEGER},
    state = 1
  </insert>
  <insert id="insertAdminUserPartyInfo" parameterType="com.zqu.pa.entity.perinfo.UserPartyInfo">
    INSERT INTO user_party_info (user_id, branch_id, name)
    SELECT 
      #{userId,jdbcType=VARCHAR}, #{branchId,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}
    FROM DUAL
    WHERE NOT EXISTS (
        SELECT * 
        FROM user_party_info
        WHERE user_id = #{userId,jdbcType=VARCHAR}
        AND is_delete = 0
    )
    ON DUPLICATE KEY UPDATE
      branch_id = #{branchId,jdbcType=INTEGER}, 
      name = #{name,jdbcType=VARCHAR},
      is_delete = 0
  </insert>
  <insert id="insertAdminUserPersonInfo" parameterType="com.zqu.pa.entity.perinfo.UserPersonInfo">
    INSERT INTO user_person_info (user_id, name, grade, class_name, 
      img_head
      )
    SELECT 
      #{userId,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR},
       #{grade,jdbcType=VARCHAR}, #{className,jdbcType=VARCHAR},
       #{img_head,jdbcType=VARCHAR}
    FROM DUAL
       WHERE NOT EXISTS (
            SELECT * 
            FROM user_person_info
            WHERE user_id = #{userId,jdbcType=VARCHAR}
            AND is_delete = 0
       )
    ON DUPLICATE KEY UPDATE
      name = #{name,jdbcType=VARCHAR},  
      grade = #{grade,jdbcType=VARCHAR}, 
      class_name = #{className,jdbcType=VARCHAR}, 
      img_head = #{img_head,jdbcType=VARCHAR},
      is_delete = 0
  </insert>
</mapper>