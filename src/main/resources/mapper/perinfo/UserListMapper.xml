<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zqu.pa.dao.perinfo.UserListMapper">

  <select id="countByBranch" resultType="int">
    SELECT count(*) 
    FROM user_party_info pa
    LEFT JOIN user_person_info pe ON pa.user_id = pe.user_id
    WHERE pe.check_state = #{checkState}
    AND pa.is_delete = 0
    <if test="branchId!=0">
        AND pa.branch_id = #{branchId}
    </if>
  </select>

  <select id="getUserBasicList" resultType="com.zqu.pa.vo.perinfo.UserList">
    SELECT upa.user_id 'userId' , upa.name 'realName' , upa.sex 'sex', upe.grade 'grade', 
    upe.class_name 'className', upa.professional 'professional', upa.branch_id 'branchId', 
    b.branch_name 'branchName', ul.role_id 'roleId', r.role_name 'roleName'
    FROM user_party_info upa
    LEFT JOIN partybranch b ON b.branch_id = upa.branch_id
    LEFT JOIN user_login ul ON ul.user_id = upa.user_id
    LEFT JOIN role r ON r.role_id = ul.role_id
    LEFT JOIN user_person_info upe ON upe.user_id = upa.user_id
    WHERE upe.check_state = #{checkState}
    <if test="branchId!=0">
    AND ul.role_id not in (SELECT rp.role_id from role_permission rp left join permission_menu pm ON pm.permission_id = rp.permission
                            WHERE permission_name = 'role:admin')
    </if>
    AND upa.is_delete = 0
    <if test="branchId!=0">
        AND b.branch_id = #{branchId}
    </if>
  </select>
  
    <select id="getUserCheckList" resultType="com.zqu.pa.vo.perinfo.UserCheckList">
    SELECT upa.user_id 'userId' , upa.name 'realName' , upa.sex 'sex', upe.grade 'grade', 
    upe.class_name 'className', upa.professional 'professional', upa.branch_id 'branchId', 
    b.branch_name 'branchName', ul.role_id 'roleId', r.role_name 'roleName' , upe.create_id 'createId',
    upee.name 'createName', upe.create_time 'createTime' 
    FROM user_party_info upa
    LEFT JOIN partybranch b ON b.branch_id = upa.branch_id
    LEFT JOIN user_login ul ON ul.user_id = upa.user_id
    LEFT JOIN role r ON r.role_id = ul.role_id
    LEFT JOIN user_person_info upe ON upe.user_id = upa.user_id
    LEFT JOIN user_person_info upee ON upee.user_id = upe.create_id
    WHERE upe.check_state = 0
    <if test="branchId!=0">
    AND ul.role_id not in (SELECT rp.role_id from role_permission rp left join permission_menu pm ON pm.permission_id = rp.permission
                            WHERE permission_name = 'role:admin')
    </if>
    AND upa.is_delete = 0
    <if test="branchId!=0">
        AND b.branch_id = #{branchId}
    </if>
  </select>

  <select id="getGradeList" resultType="String">
	SELECT DISTINCT upe.grade
	FROM user_party_info upa
	LEFT JOIN user_person_info upe ON upa.user_id = upe.user_id
	WHERE upa.is_delete = 0
    <if test="branchId!=0">
        AND upa.branch_id = #{branchId}
    </if>
  </select>
  
  <select id="getClassList" resultType="String">
    SELECT DISTINCT upe.class_name
    FROM user_party_info upa
    LEFT JOIN user_person_info upe ON upa.user_id = upe.user_id 
    WHERE upa.is_delete = 0
    <if test="branchId!=0">
        AND upa.branch_id = #{branchId}
    </if>
  </select>
  
  <select id="getBranchList" resultType="com.zqu.pa.vo.perinfo.Branch">
    SELECT branch_id , branch_name
    FROM partybranch
    where branch_id != 0
  </select>
  
  <select id="getRoleList" resultType="com.zqu.pa.vo.perinfo.Role">
    SELECT role_id , role_name
    FROM role
    where role_id not in (SELECT rp.role_id from role_permission rp left join permission_menu pm ON pm.permission_id = rp.permission
                            WHERE permission_name = 'role:admin')
  </select>
  
    <insert id="insertAdminUserLoginInfo" parameterType="com.zqu.pa.vo.userInfo.UserLoginInfo">
    insert into user_login 
        (user_id ,
        password ,
        role_id ,
        state)
    values(
        #{userId,jdbcType=VARCHAR},
        #{password,jdbcType=VARCHAR}, 
        #{roleId,jdbcType=INTEGER},
        #{state,jdbcType=INTEGER}
        )
    ON DUPLICATE KEY UPDATE 
    password = #{password,jdbcType=VARCHAR}, 
    role_id = #{roleId,jdbcType=INTEGER},
    state = 1
  </insert>
  <insert id="insertAdminUserPartyInfo" parameterType="com.zqu.pa.entity.perinfo.UserPartyInfo">
    INSERT INTO user_party_info (user_id, branch_id, name)
    SELECT 
      #{userId,jdbcType=VARCHAR}, #{branchId,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}
    FROM DUAL
    WHERE NOT EXISTS (
        SELECT * 
        FROM user_party_info
        WHERE user_id = #{userId,jdbcType=VARCHAR}
        AND is_delete = 0
    )
    ON DUPLICATE KEY UPDATE
      branch_id = #{branchId,jdbcType=INTEGER}, 
      name = #{name,jdbcType=VARCHAR},
      is_delete = 0
  </insert>
    <insert id="insertAdminUserPersonInfo" parameterType="com.zqu.pa.entity.perinfo.UserPersonInfo">
    INSERT INTO user_person_info (user_id, name, grade, class_name, 
      img_head
      )
    SELECT 
      #{userId,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR},
       #{grade,jdbcType=VARCHAR}, #{className,jdbcType=VARCHAR},
       #{img_head,jdbcType=VARCHAR}
    FROM DUAL
       WHERE NOT EXISTS (
            SELECT * 
            FROM user_person_info
            WHERE user_id = #{userId,jdbcType=VARCHAR}
            AND is_delete = 0
       )
    ON DUPLICATE KEY UPDATE
      name = #{name,jdbcType=VARCHAR},  
      grade = #{grade,jdbcType=VARCHAR}, 
      class_name = #{className,jdbcType=VARCHAR}, 
      img_head = #{img_head,jdbcType=VARCHAR},
      is_delete = 0
  </insert>
</mapper>