<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zqu.pa.dao.vote.VoteResultMapper">
  <resultMap id="BaseResultMap" type="com.zqu.pa.entity.vote.VoteResult">
    <id column="result_id" jdbcType="BIGINT" property="resultId" />
    <result column="vote_id" jdbcType="BIGINT" property="voteId" />
    <result column="user_id" jdbcType="VARCHAR" property="userId" />
    <result column="abandon" jdbcType="INTEGER" property="abandon" />
    <result column="choice_id" jdbcType="BIGINT" property="choiceId" />
    <result column="sort" jdbcType="INTEGER" property="sort" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    result_id, vote_id, user_id, abandon, choice_id, sort
  </sql>
  <select id="selectByExample" parameterType="com.zqu.pa.entity.vote.VoteResultExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from vote_result
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from vote_result
    where result_id = #{resultId,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from vote_result
    where result_id = #{resultId,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.zqu.pa.entity.vote.VoteResultExample">
    delete from vote_result
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.zqu.pa.entity.vote.VoteResult">
    insert into vote_result (result_id, vote_id, user_id, 
      abandon, choice_id, sort
      )
    values (#{resultId,jdbcType=BIGINT}, #{voteId,jdbcType=BIGINT}, #{userId,jdbcType=VARCHAR}, 
      #{abandon,jdbcType=INTEGER}, #{choiceId,jdbcType=BIGINT}, #{sort,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.zqu.pa.entity.vote.VoteResult">
    insert into vote_result
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="resultId != null">
        result_id,
      </if>
      <if test="voteId != null">
        vote_id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="abandon != null">
        abandon,
      </if>
      <if test="choiceId != null">
        choice_id,
      </if>
      <if test="sort != null">
        sort,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="resultId != null">
        #{resultId,jdbcType=BIGINT},
      </if>
      <if test="voteId != null">
        #{voteId,jdbcType=BIGINT},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=VARCHAR},
      </if>
      <if test="abandon != null">
        #{abandon,jdbcType=INTEGER},
      </if>
      <if test="choiceId != null">
        #{choiceId,jdbcType=BIGINT},
      </if>
      <if test="sort != null">
        #{sort,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.zqu.pa.entity.vote.VoteResultExample" resultType="java.lang.Long">
    select count(*) from vote_result
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update vote_result
    <set>
      <if test="record.resultId != null">
        result_id = #{record.resultId,jdbcType=BIGINT},
      </if>
      <if test="record.voteId != null">
        vote_id = #{record.voteId,jdbcType=BIGINT},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=VARCHAR},
      </if>
      <if test="record.abandon != null">
        abandon = #{record.abandon,jdbcType=INTEGER},
      </if>
      <if test="record.choiceId != null">
        choice_id = #{record.choiceId,jdbcType=BIGINT},
      </if>
      <if test="record.sort != null">
        sort = #{record.sort,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update vote_result
    set result_id = #{record.resultId,jdbcType=BIGINT},
      vote_id = #{record.voteId,jdbcType=BIGINT},
      user_id = #{record.userId,jdbcType=VARCHAR},
      abandon = #{record.abandon,jdbcType=INTEGER},
      choice_id = #{record.choiceId,jdbcType=BIGINT},
      sort = #{record.sort,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.zqu.pa.entity.vote.VoteResult">
    update vote_result
    <set>
      <if test="voteId != null">
        vote_id = #{voteId,jdbcType=BIGINT},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=VARCHAR},
      </if>
      <if test="abandon != null">
        abandon = #{abandon,jdbcType=INTEGER},
      </if>
      <if test="choiceId != null">
        choice_id = #{choiceId,jdbcType=BIGINT},
      </if>
      <if test="sort != null">
        sort = #{sort,jdbcType=INTEGER},
      </if>
    </set>
    where result_id = #{resultId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.zqu.pa.entity.vote.VoteResult">
    update vote_result
    set vote_id = #{voteId,jdbcType=BIGINT},
      user_id = #{userId,jdbcType=VARCHAR},
      abandon = #{abandon,jdbcType=INTEGER},
      choice_id = #{choiceId,jdbcType=BIGINT},
      sort = #{sort,jdbcType=INTEGER}
    where result_id = #{resultId,jdbcType=BIGINT}
  </update>
  
  <select id="countVoteChoice" resultType="java.lang.Long">
    select count(*) from vote_result
    where vote_id = #{voteId} and choice_id = #{choiceId} and abandon = 0
  </select>
  
  <select id="countVoteSortChoice" resultType="java.lang.Long">
    select count(*) from vote_result
    where vote_id = #{voteId} and choice_id = #{choiceId} and abandon = 0 and sort = #{sort}
  </select>
</mapper>